USE WORLD_LAYOFFS;

SELECT *
FROM LAYOFFS;

-- creating another table 
CREATE TABLE LAYOFFS_STAGING
LIKE LAYOFFS;

SELECT * FROM LAYOFFS_STAGING;

INSERT LAYOFFS_STAGING
SELECT * 
FROM LAYOFFS;

-- REMOVING DUPLICATES 
SELECT * FROM LAYOFFS_STAGING;

SELECT * ,
ROW_NUMBER() OVER(
PARTITION BY COMPANY,INDUSTRY,TOTAL_LAID_OFF,PERCENTAGE_LAID_OFF,'DATE') AS ROW_NUM
FROM LAYOFFS_STAGING;       -- GAVE ROW NUMBERS TO EACH SO THAT UNIQUE WILL GET DIFF NUMBERS
-- DO PARTITION BY EVERY SINGLE COLUMN 

WITH DUPLICATES_CTE AS
(
SELECT * ,
ROW_NUMBER() OVER(
PARTITION BY COMPANY,LOCATION ,INDUSTRY,TOTAL_LAID_OFF,PERCENTAGE_LAID_OFF,'DATE',STAGE,COUNTRY,FUNDS_RAISED_MILLIONS) AS ROW_NUM
FROM LAYOFFS_STAGING
)
SELECT *
FROM DUPLICATES_CTE
WHERE ROW_NUM>1;

SELECT*
FROM LAYOFFS
WHERE COMPANY="CASPER";



CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `ROW_NUM`INT 
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


SELECT *
FROM LAYOFFS_STAGING2;

INSERT  INTO LAYOFFS_STAGING2            -- transfering all data to another table 
SELECT * ,
ROW_NUMBER() OVER(
PARTITION BY COMPANY,INDUSTRY,TOTAL_LAID_OFF,PERCENTAGE_LAID_OFF,`DATE`) AS ROW_NUM
FROM LAYOFFS_STAGING; 

SELECT *
FROM LAYOFFS_STAGING2
WHERE ROW_NUM =2;

DELETE
FROM LAYOFFS_STAGING2
WHERE ROW_NUM >1;

SET SQL_SAFE_UPDATES=0;

SELECT *
FROM LAYOFFS_STAGING2
WHERE ROW_NUM>1;   -- CLEARED DUPLICATES 


-- STANDARDIZING DATA 

SELECT * FROM LAYOFFS_STAGING2;

SELECT COMPANY , TRIM(COMPANY)
FROM LAYOFFS_STAGING2;

UPDATE LAYOFFS_STAGING2
SET COMPANY=TRIM(COMPANY);

SELECT  DISTINCT INDUSTRY
FROM LAYOFFS_STAGING2
ORDER BY 1;

SELECT  *
FROM LAYOFFS_STAGING2
WHERE INDUSTRY LIKE 'CRYPTO%';

UPDATE LAYOFFS_STAGING2
SET INDUSTRY ='Crypto'
WHERE INDUSTRY LIKE 'CRYPTO%';

SELECT * FROM LAYOFFS_STAGING2;

SELECT  COUNT(COMPANY)
FROM LAYOFFS_STAGING2
ORDER BY 1;

SELECT  DISTINCT LOCATION
FROM LAYOFFS_STAGING2
ORDER BY 1;

SELECT * FROM LAYOFFS_STAGING2;

SELECT  DISTINCT COUNTRY
FROM LAYOFFS_STAGING2
ORDER BY 1;

SELECT AVG(TOTAL_LAID_OFF)
FROM LAYOFFS_STAGING2;

UPDATE LAYOFFS_STAGING2
SET COUNTRY = 'United States'
WHERE COUNTRY='United States.';


-- for timesereis visualization , we need date in DATE format 

SELECT `date`,
STR_TO_DATE(`DATE`,'%m/%d/%Y')
FROM LAYOFFS_STAGING2;

UPDATE LAYOFFS_STAGING2
SET DATE=STR_TO_DATE(`DATE`,'%m/%d/%Y');

ALTER TABLE LAYOFFS_STAGING2
MODIFY COLUMN `date` DATE;

SELECT * FROM LAYOFFS_STAGING2;

SELECT DISTINCT STAGE 
FROM LAYOFFS_STAGING2
ORDER BY STAGE ASC;

-- DEALING WITH NULL VALUES 
SELECT * FROM LAYOFFS_STAGING2;

SELECT COUNT(COMPANY)
FROM LAYOFFS_STAGING2
WHERE TOTAL_LAID_OFF IS NULL
AND PERCENTAGE_LAID_OFF IS NULL;     -- IF BOTH ARE NULL, THEY ARE OF NO USE OF OURS MAYBE 


SELECT *
FROM LAYOFFS_STAGING2
WHERE INDUSTRY IS NULL
OR INDUSTRY ='';

SELECT *
FROM LAYOFFS_STAGING2
WHERE COMPANY ='AIRBNB';  -- ONE OF RECORD WE ARE GETTING AS TRAVEL SO WE CAN UPDATE THE OTHER ONE 

SELECT *
FROM LAYOFFS_STAGING2 AS T1
JOIN LAYOFFS_STAGING2 AS T2 
	ON T1.COMPANY=T2.COMPANY
WHERE(T1.INDUSTRY IS NULL OR T1.INDUSTRY ="")
AND T2.INDUSTRY IS NOT NULL;

UPDATE LAYOFFS_STAGING2 
SET INDUSTRY=NULL
WHERE INDUSTRY ="";

UPDATE LAYOFFS_STAGING2 AS T1 
JOIN LAYOFFS_STAGING2 AS T2 
	ON T1.COMPANY=T2.COMPANY
SET T1.INDUSTRY=T2.INDUSTRY
WHERE (T1.INDUSTRY IS NULL OR T1.INDUSTRY ="")
AND T2.INDUSTRY IS NOT NULL;


SELECT *
FROM LAYOFFS_STAGING2
WHERE TOTAL_LAID_OFF IS NULL
AND PERCENTAGE_LAID_OFF IS NULL;     -- IF BOTH ARE NULL, THEY ARE OF NO USE OF OURS MAYBE (360)

DELETE 
FROM LAYOFFS_STAGING2
WHERE TOTAL_LAID_OFF IS NULL
AND PERCENTAGE_LAID_OFF IS NULL;

SELECT *
FROM LAYOFFS_STAGING2;

ALTER TABLE LAYOFFS_STAGING2
DROP COLUMN ROW_NUM;















